---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';

// --- START: SHOPIFY DATA FETCHING ---
const SHOPIFY_STORE_DOMAIN = import.meta.env.PUBLIC_SHOPIFY_STORE_DOMAIN;
const SHOPIFY_STOREFRONT_API_TOKEN = import.meta.env.PUBLIC_SHOPIFY_STOREFRONT_API_TOKEN;
const storefrontApiUrl = `https://${SHOPIFY_STORE_DOMAIN}/api/2023-10/graphql.json`;

async function getShopifyProduct(shopifyProductId) {
  const query = `
    query getProductById($id: ID!) {
      product(id: $id) {
        priceRange {
          minVariantPrice {
            amount
          }
        }
        variants(first: 1) {
          edges {
            node {
              id
              availableForSale
            }
          }
        }
      }
    }
  `;
  try {
    const response = await fetch(storefrontApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': SHOPIFY_STOREFRONT_API_TOKEN,
      },
      body: JSON.stringify({
        query,
        variables: { id: shopifyProductId },
      }),
    });
    const json = await response.json();
    return json.data.product;
  } catch (error) {
    console.error(`Failed to fetch Shopify product:`, error);
    return null;
  }
}

export async function getStaticPaths() {
  const products = await getCollection('products');
  return products.map((product) => ({
    params: { slug: product.slug },
    props: product,
  }));
}

const { data, render } = Astro.props;
const { Content } = await render();

const shopifyProduct = await getShopifyProduct(data.shopifyProductId);
const price = shopifyProduct?.priceRange.minVariantPrice;
const variantId = shopifyProduct?.variants.edges[0]?.node.id;
const isAvailable = shopifyProduct?.variants.edges[0]?.node.availableForSale;
---

<Layout title={data.title}>
  <main class="py-16">
    <div class="max-w-5xl mx-auto px-4">
        
      <section class="grid grid-cols-1 md:grid-cols-2 gap-12 items-start">
        <div class="w-full md:sticky top-24">
          <div class="swiper main-gallery aspect-square rounded-lg shadow-lg mb-4">
              <div class="swiper-wrapper">
                  {data.images.map((image) => (
                      <div class="swiper-slide">
                          <a 
                            href={image.src} 
                            data-pswp-width={image.width} 
                            data-pswp-height={image.height} 
                            target="_blank" 
                            class="gallery-link"
                          >
                              <Image 
                                src={image} 
                                alt={`Image of ${data.title}`} 
                                width={800} 
                                height={800} 
                                format="webp" 
                                class="w-full h-full object-cover" 
                              />
                          </a>
                      </div>
                  ))}
              </div>
              <div class="swiper-button-prev text-white"></div>
              <div class="swiper-button-next text-white"></div>
          </div>

          <div class="swiper thumbs-gallery h-24">
              <div class="swiper-wrapper">
                  {data.images.map((image) => (
                      <div class="swiper-slide cursor-pointer rounded-md overflow-hidden">
                          <Image 
                            src={image} 
                            alt={`Thumbnail of ${data.title}`} 
                            width={100} 
                            height={100} 
                            format="webp" 
                            class="w-full h-full object-cover" 
                          />
                      </div>
                  ))}
              </div>
          </div>

        </div>

        <div class="pt-4">
          <h1 class="font-heading text-4xl font-bold mb-4 text-brand-text">{data.title}</h1>

          <div class="mb-8">
              <div class="flex items-center gap-4 mb-6">
                  {price && (
                    <p class="text-3xl font-light text-brand-primary">
                      ${parseInt(price.amount)} 
                    </p>
                  )}
                  <div class="text-gray-400">
                      ★★★★★ (0 reviews)
                  </div>
              </div>

              <div class="grid grid-cols-2 gap-4">
                <button
                  id="add-to-cart"
                  data-variant-id={variantId}
                  class="w-full bg-brand-primary text-white font-bold py-3 px-6 rounded-lg hover:bg-brand-primary/75 transition-colors duration-300 disabled:opacity-70"
                >
                  Add to Cart
                </button>
                <button
                  id="buy-now"
                  data-variant-id={variantId}
                  class="w-full bg-brand-text text-white font-bold py-3 px-6 rounded-lg hover:bg-brand-text/75 transition-all duration-300 disabled:opacity-70"                >
                  Buy Now
                </button>
              </div>
              </div>
          
          <div class="prose max-w-none text-gray-700">
              <Content />
          </div>
        </div>
      </section>

        <section id="reviews" class="py-20 mt-16 border-t border-gray-200">
            <h2 class="font-heading text-4xl font-bold mb-12 text-center text-brand-primary">Customer Reviews</h2>
            <div class="bg-gray-100 rounded-lg p-12 text-center">
                <p class="font-semibold text-gray-500">Judge.me reviews widget will be implemented here.</p>
            </div>
        </section>

    </div>
  </main>
</Layout>


<style>
  /* Keep your existing rule for width */
  .main-gallery .swiper-slide {
    width: 100% !important;
  }
  
  /* Keep your existing rule for arrow color */
  .main-gallery {
    --swiper-navigation-color: #fff;
  }

  /* Add these styles for the thumbnails */
  .thumbs-gallery .swiper-slide {
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }

  .thumbs-gallery .swiper-slide-thumb-active {
    opacity: 1;
  }
</style>

<script>
  import Swiper from 'swiper';
  // Import the Thumbs module
  import { Navigation, Thumbs } from 'swiper/modules';
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  
  import 'swiper/css';
  import 'swiper/css/navigation';
  import 'swiper/css/thumbs'; // Add thumbs CSS
  import 'photoswipe/style.css';

  // Initialize the thumbnail swiper first
  const thumbsSwiper = new Swiper('.thumbs-gallery', {
    loop: true,
    spaceBetween: 10,
    slidesPerView: 4,
    freeMode: true,
    watchSlidesProgress: true,
  });

  // Initialize the main swiper
  const mainSwiper = new Swiper('.main-gallery', {
    // Use Thumbs and Navigation modules
    modules: [Navigation, Thumbs],
    loop: true,
    spaceBetween: 10,
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    // Link it to the thumbnail swiper
    thumbs: {
      swiper: thumbsSwiper,
    },
  });

  // Initialize PhotoSwipe (no changes here)
  const lightbox = new PhotoSwipeLightbox({
    gallery: '.main-gallery', // Target the main gallery for lightbox
    children: '.gallery-link',
    pswpModule: () => import('photoswipe'),
    imageClickAction: 'close',
    tapAction: 'close',
    doubleTapAction: false,
  });

  lightbox.init();
</script>

<script>
    import { addToCart } from '../lib/cart-store.js';

    // Note: The triggerCartIconAnimation function is now defined here
    // as it's only used on this page's interaction.
    const cartOpenButtons = document.querySelectorAll('.open-cart');
    function triggerCartIconAnimation() {
        cartOpenButtons.forEach(btn => {
            btn.classList.add('animate-shake');
            setTimeout(() => {
                btn.classList.remove('animate-shake');
            }, 600); // Duration of the shake animation
        });
    }

    const addToCartButton = document.getElementById('add-to-cart');
    const buyNowButton = document.getElementById('buy-now');

    const spinnerIcon = `
        <svg class="animate-spin h-5 w-5 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
    `;

    addToCartButton.addEventListener('click', async () => {
        const variantId = addToCartButton.dataset.variantId;
        
        addToCartButton.disabled = true;
        buyNowButton.disabled = true;
        addToCartButton.innerHTML = `<div class="flex justify-center items-center">${spinnerIcon}</div>`;

        try {
            await addToCart(variantId);

            addToCartButton.innerHTML = '✓ Added!';
            
            setTimeout(() => {
                triggerCartIconAnimation();
            }, 250); // 250ms delay

            setTimeout(() => {
                addToCartButton.disabled = false;
                buyNowButton.disabled = false;
                addToCartButton.innerHTML = 'Add to Cart';
            }, 1500);

        } catch (error) {
            console.error("Failed to add item to cart:", error);
            addToCartButton.innerHTML = 'Error!';
             setTimeout(() => {
                addToCartButton.disabled = false;
                buyNowButton.disabled = false;
                addToCartButton.innerHTML = 'Add to Cart';
            }, 1500);
        }
    });

    // --- Buy Now button logic remains the same ---
    buyNowButton.addEventListener('click', async () => {
        const variantId = buyNowButton.dataset.variantId;
        
        buyNowButton.disabled = true;
        buyNowButton.textContent = 'Processing...';
        addToCartButton.disabled = true;

        try {
            const res = await fetch('/api/buy-now', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ variantId })
            });

            if (!res.ok) throw new Error('Failed to create checkout.');

            const { checkoutUrl } = await res.json();
            window.location.href = checkoutUrl;

        } catch (error) {
            console.error(error);
            buyNowButton.textContent = 'Error - Please try again';
            addToCartButton.disabled = false;
        }
    });
</script>